using GymPal.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GymPal.Core.Interfaces
{
    // Interface for performing CRUD operations on a database.
    // This interface does not include UPDATE definitions since records generated by the application are intended to be immutable.
    // This interface does not include multiple record addition in one operation since the application is intended to add one record at a time.
    public interface IRepository
    {
        /// <summary>
        /// Add a single record to the database.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="record"></param>
        /// <returns>The number of rows affected by the operation.</returns>
        Task<int> AddRecordAsync<T>(T record) where T : class;

        /// <summary>
        /// Retrieve multiple records from the database in a single operation.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="argument"></param>
        /// <returns>All records returned by the operation.</returns>
        Task<IEnumerable<T>> GetRecordsAsync<T>(T argument) where T : class;

        /// <summary>
        /// Delete a single record from the database.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="argument"></param>
        /// <returns>The number of rows affected by the operation.</returns>
        Task<int> DeleteRecordAsync<T>(T argument) where T : class;
    }
}
